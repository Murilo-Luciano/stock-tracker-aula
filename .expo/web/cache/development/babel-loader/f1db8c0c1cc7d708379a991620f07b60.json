{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Duck } from \"./Duck\";\nvar initialSymbols = [\"BRML3\", \"PETR4\", \"IGTA3\"];\n\nvar EquityListDuck = function (_Duck) {\n  _inherits(EquityListDuck, _Duck);\n\n  var _super = _createSuper(EquityListDuck);\n\n  function EquityListDuck() {\n    var _this;\n\n    _classCallCheck(this, EquityListDuck);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.ADD_SYMBOL = _this.type('ADD_SYMBOL');\n    _this.LOAD_EQUITY = _this.type('LOAD_EQUITY');\n    return _this;\n  }\n\n  _createClass(EquityListDuck, [{\n    key: \"reducer\",\n    value: function reducer(prevState, action) {\n      switch (action.type) {\n        case \"ADD_SYMBOL\":\n          {\n            var symbol = action.payload.symbol;\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              symbols: [].concat(_toConsumableArray(prevState.symbols), [symbol]),\n              equities: _objectSpread(_objectSpread({}, prevState.equities), {}, _defineProperty({}, symbol, {\n                symbol: symbol,\n                isLoading: true\n              }))\n            });\n          }\n\n        case \"LOAD_EQUITY\":\n          {\n            var _action$payload = action.payload,\n                _symbol = _action$payload.symbol,\n                _name = _action$payload.name,\n                marketData = _action$payload.marketData;\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              equities: _objectSpread(_objectSpread({}, prevState.equities), {}, _defineProperty({}, _symbol, {\n                symbol: _symbol,\n                name: _name,\n                marketData: marketData,\n                isLoading: false\n              }))\n            });\n          }\n\n        default:\n          return prevState;\n      }\n    }\n  }, {\n    key: \"initialState\",\n    value: function initialState() {\n      return {\n        symbols: initialSymbols,\n        equities: initialSymbols.reduce(function (acc, symbol) {\n          return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, symbol, {\n            symbol: symbol,\n            isLoading: true\n          }));\n        }, {})\n      };\n    }\n  }, {\n    key: \"namespace\",\n    value: function namespace() {\n      return \"stock-tracker\";\n    }\n  }, {\n    key: \"store\",\n    value: function store() {\n      return \"symbols\";\n    }\n  }]);\n\n  return EquityListDuck;\n}(Duck);\n\nexport var equityListDuck = new EquityListDuck();","map":{"version":3,"sources":["/home/igor/Documentos/Programa de Formação Investtools/ReactNative/stock-tracker-aula/src/ducks/EquityListDuck.ts"],"names":["Duck","initialSymbols","EquityListDuck","ADD_SYMBOL","type","LOAD_EQUITY","prevState","action","symbol","payload","symbols","equities","isLoading","name","marketData","reduce","acc","equityListDuck"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,IAAT;AAgBA,IAAMC,cAAc,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAvB;;IAEMC,c;;;;;;;;;;;;;;;UAEYC,U,GAAa,MAAKC,IAAL,CAAU,YAAV,C;UACbC,W,GAAc,MAAKD,IAAL,CAAU,aAAV,C;;;;;;WAG9B,iBAAeE,SAAf,EAAqCC,MAArC,EAAoD;AAChD,cAAQA,MAAM,CAACH,IAAf;AACE,aAAK,YAAL;AAAmB;AACjB,gBAAQI,MAAR,GAAmBD,MAAM,CAACE,OAA1B,CAAQD,MAAR;AACA,mDACKF,SADL;AAEEI,cAAAA,OAAO,+BAAMJ,SAAS,CAACI,OAAhB,IAAyBF,MAAzB,EAFT;AAGEG,cAAAA,QAAQ,kCACHL,SAAS,CAACK,QADP,2BAELH,MAFK,EAEI;AAAEA,gBAAAA,MAAM,EAANA,MAAF;AAAUI,gBAAAA,SAAS,EAAE;AAArB,eAFJ;AAHV;AAQD;;AACD,aAAK,aAAL;AAAoB;AAClB,kCAAqCL,MAAM,CAACE,OAA5C;AAAA,gBAAQD,OAAR,mBAAQA,MAAR;AAAA,gBAAgBK,KAAhB,mBAAgBA,IAAhB;AAAA,gBAAsBC,UAAtB,mBAAsBA,UAAtB;AACA,mDACKR,SADL;AAEEK,cAAAA,QAAQ,kCACHL,SAAS,CAACK,QADP,2BAELH,OAFK,EAEI;AAAEA,gBAAAA,MAAM,EAANA,OAAF;AAAUK,gBAAAA,IAAI,EAAJA,KAAV;AAAgBC,gBAAAA,UAAU,EAAVA,UAAhB;AAA4BF,gBAAAA,SAAS,EAAE;AAAvC,eAFJ;AAFV;AAOD;;AACD;AACE,iBAAON,SAAP;AAvBJ;AAyBD;;;WAED,wBAAoC;AAClC,aAAO;AACLI,QAAAA,OAAO,EAAET,cADJ;AAELU,QAAAA,QAAQ,EAAEV,cAAc,CAACc,MAAf,CACR,UAACC,GAAD,EAAMR,MAAN;AAAA,iDAAuBQ,GAAvB,2BAA6BR,MAA7B,EAAsC;AAAEA,YAAAA,MAAM,EAANA,MAAF;AAAUI,YAAAA,SAAS,EAAE;AAArB,WAAtC;AAAA,SADQ,EAER,EAFQ;AAFL,OAAP;AAOD;;;WACD,qBAA8B;AAC5B,aAAO,eAAP;AACD;;;WAED,iBAA0B;AACxB,aAAO,SAAP;AACD;;;;EAjDwBZ,I;;AAqD7B,OAAO,IAAMiB,cAAc,GAAI,IAAIf,cAAJ,EAAxB","sourcesContent":["import { Duck } from \"./Duck\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nexport interface PrevState {\n  symbols:string[]\n  equities:{[name:string]:{symbol:string, isLoading:boolean}}\n}\n  \ninterface Action{\n  type:string \n  payload:{symbol:string, name?:string, marketData?:{close:number, change:number, priceTrend:number[]}}\n}\n  \n\n\nconst initialSymbols = [\"BRML3\", \"PETR4\", \"IGTA3\"];\n\nclass EquityListDuck extends Duck<PrevState, Action>{\n  \n  public readonly ADD_SYMBOL = this.type('ADD_SYMBOL');\n  public readonly LOAD_EQUITY = this.type('LOAD_EQUITY');\n\n  \n  public reducer(prevState: PrevState, action: Action){\n      switch (action.type) {\n        case \"ADD_SYMBOL\": {\n          const { symbol } = action.payload;\n          return {\n            ...prevState,\n            symbols: [...prevState.symbols, symbol],\n            equities: {\n              ...prevState.equities,\n              [symbol]: { symbol, isLoading: true },\n            },\n          };\n        }\n        case \"LOAD_EQUITY\": {\n          const { symbol, name, marketData } = action.payload;\n          return {\n            ...prevState,\n            equities: {\n              ...prevState.equities,\n              [symbol]: { symbol, name, marketData, isLoading: false },\n            },\n          };\n        }\n        default:\n          return prevState;\n      }\n    }\n    \n    protected initialState(): PrevState {\n      return {\n        symbols: initialSymbols,\n        equities: initialSymbols.reduce(\n          (acc, symbol) => ({ ...acc, [symbol]: { symbol, isLoading: true } }),\n          {}\n        ),\n      }\n    }\n    protected namespace(): string {\n      return \"stock-tracker\";\n    }\n  \n    protected store(): string {\n      return \"symbols\";\n    }\n    \n}\n\nexport const equityListDuck =  new EquityListDuck()"]},"metadata":{},"sourceType":"module"}