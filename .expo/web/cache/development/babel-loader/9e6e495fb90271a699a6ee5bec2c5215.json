{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nvar server = axios.create({\n  baseURL: \"https://api.informativos.io/\"\n});\nexport function fetchPriceTrend(symbol) {\n  var today, endDate, oneMonthAgo, startDate, response;\n  return _regeneratorRuntime.async(function fetchPriceTrend$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          today = new Date();\n          endDate = today.toISOString().substring(0, 10);\n          oneMonthAgo = new Date();\n          oneMonthAgo.setMonth(today.getMonth() == 0 ? 11 : today.getMonth() - 1);\n          startDate = oneMonthAgo.toISOString().substring(0, 10);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(server.get(\"prices_matrix?symbols[]=\" + symbol + \"&start_date=\" + startDate + \"&end_date=\" + endDate + \"&property=close\"));\n\n        case 7:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.data.slice(1).map(function (item) {\n            return Number(item[1]);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchCurrentMarketData(symbol) {\n  var currentDate, priceDate, response, data;\n  return _regeneratorRuntime.async(function fetchCurrentMarketData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          currentDate = new Date();\n          currentDate.setDate(currentDate.getDate() - 1);\n          priceDate = currentDate.toISOString().substring(0, 10);\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(server.get(\"prices/\" + priceDate + \"?symbols[]=\" + symbol));\n\n        case 5:\n          response = _context2.sent;\n          data = response.data[0];\n          console.log(data);\n          return _context2.abrupt(\"return\", {\n            close: Number(data.close),\n            change: Number(data.change)\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/igor/Documentos/Programa de Formação Investtools/ReactNative/stock-tracker-aula/src/server.ts"],"names":["axios","server","create","baseURL","fetchPriceTrend","symbol","today","Date","endDate","toISOString","substring","oneMonthAgo","setMonth","getMonth","startDate","get","response","data","slice","map","item","Number","fetchCurrentMarketData","currentDate","setDate","getDate","priceDate","console","log","close","change"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE;AADiB,CAAb,CAAf;AAIA,OAAO,SAAeC,eAAf,CAA+BC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,KADD,GACS,IAAIC,IAAJ,EADT;AAECC,UAAAA,OAFD,GAEWF,KAAK,CAACG,WAAN,GAAoBC,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,CAFX;AAICC,UAAAA,WAJD,GAIe,IAAIJ,IAAJ,EAJf;AAKLI,UAAAA,WAAW,CAACC,QAAZ,CAAqBN,KAAK,CAACO,QAAN,MAAoB,CAApB,GAAwB,EAAxB,GAA6BP,KAAK,CAACO,QAAN,KAAmB,CAArE;AACMC,UAAAA,SAND,GAMaH,WAAW,CAACF,WAAZ,GAA0BC,SAA1B,CAAoC,CAApC,EAAuC,EAAvC,CANb;AAAA;AAAA,2CAQkBT,MAAM,CAACc,GAAP,8BACMV,MADN,oBAC2BS,SAD3B,kBACiDN,OADjD,qBARlB;;AAAA;AAQCQ,UAAAA,QARD;AAAA,2CAYEA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,CAApB,EAAuBC,GAAvB,CAA2B,UAACC,IAAD;AAAA,mBAAmBC,MAAM,CAACD,IAAI,CAAC,CAAD,CAAL,CAAzB;AAAA,WAA3B,CAZF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAeE,sBAAf,CAAsCjB,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCkB,UAAAA,WADD,GACe,IAAIhB,IAAJ,EADf;AAGLgB,UAAAA,WAAW,CAACC,OAAZ,CAAoBD,WAAW,CAACE,OAAZ,KAAwB,CAA5C;AACMC,UAAAA,SAJD,GAIaH,WAAW,CAACd,WAAZ,GAA0BC,SAA1B,CAAoC,CAApC,EAAuC,EAAvC,CAJb;AAAA;AAAA,2CAMkBT,MAAM,CAACc,GAAP,aAAqBW,SAArB,mBAA4CrB,MAA5C,CANlB;;AAAA;AAMCW,UAAAA,QAND;AAOCC,UAAAA,IAPD,GAOQD,QAAQ,CAACC,IAAT,CAAc,CAAd,CAPR;AASLU,UAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AATK,4CAWE;AACLY,YAAAA,KAAK,EAAER,MAAM,CAACJ,IAAI,CAACY,KAAN,CADR;AAELC,YAAAA,MAAM,EAAET,MAAM,CAACJ,IAAI,CAACa,MAAN;AAFT,WAXF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\n\nconst server = axios.create({\n  baseURL: \"https://api.informativos.io/\",\n});\n\nexport async function fetchPriceTrend(symbol:string) {\n  const today = new Date();\n  const endDate = today.toISOString().substring(0, 10);\n\n  const oneMonthAgo = new Date();\n  oneMonthAgo.setMonth(today.getMonth() == 0 ? 11 : today.getMonth() - 1);\n  const startDate = oneMonthAgo.toISOString().substring(0, 10);\n\n  const response = await server.get(\n    `prices_matrix?symbols[]=${symbol}&start_date=${startDate}&end_date=${endDate}&property=close`\n  );\n\n  return response.data.slice(1).map((item:string[]) => Number(item[1]));\n}\n\nexport async function fetchCurrentMarketData(symbol:string) {\n  const currentDate = new Date();\n  // o certo seria pegar o último dia útil, aqui está simplificado\n  currentDate.setDate(currentDate.getDate() - 1);\n  const priceDate = currentDate.toISOString().substring(0, 10);\n\n  const response = await server.get(`prices/${priceDate}?symbols[]=${symbol}`);\n  const data = response.data[0];\n\n  console.log(data)\n\n  return {\n    close: Number(data.close),\n    change: Number(data.change),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}