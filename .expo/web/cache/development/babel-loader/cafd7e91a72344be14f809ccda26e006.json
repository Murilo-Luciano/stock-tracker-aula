{"ast":null,"code":"var _jsxFileName = \"/home/igor/Documentos/Programa de Forma\\xE7\\xE3o Investtools/ReactNative/stock-tracker-aula/src/screens/AppRoot.tsx\";\nimport React from \"react\";\nimport { authenticationDuck } from \"../ducks/AuthenticationDuck\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport SplashScreen from \"./SplashScreen\";\nimport MainScreen from \"./MainScreen\";\nimport SignInScreen from \"./SignInScreen\";\nvar Stack = createStackNavigator();\nexport default function AppRoot() {\n  var _useSelector = useSelector(function (state) {\n    return state.authentication;\n  }),\n      authToken = _useSelector.authToken,\n      isLoading = _useSelector.isLoading;\n\n  var dispatch = useDispatch();\n  React.useEffect(function () {\n    dispatch(authenticationDuck.loadToken());\n  }, []);\n\n  if (isLoading) {\n    return React.createElement(SplashScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }\n    });\n  }\n\n  return React.createElement(Stack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, authToken == null ? React.createElement(Stack.Screen, {\n    name: \"SignIn\",\n    component: SignInScreen,\n    options: {\n      title: \"Login\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }) : React.createElement(Stack.Screen, {\n    name: \"Main\",\n    component: MainScreen,\n    options: {\n      header: function header() {\n        return null;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }));\n}","map":{"version":3,"sources":["/home/igor/Documentos/Programa de Formação Investtools/ReactNative/stock-tracker-aula/src/screens/AppRoot.tsx"],"names":["React","authenticationDuck","createStackNavigator","useDispatch","useSelector","SplashScreen","MainScreen","SignInScreen","Stack","AppRoot","state","authentication","authToken","isLoading","dispatch","useEffect","loadToken","title","header"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,kBAAR;AAIA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAMA,OAAOC,YAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;AAEA,IAAMC,KAAK,GAAGN,oBAAoB,EAAlC;AAIA,eAAe,SAASO,OAAT,GAAkB;AAC7B,qBAA+BL,WAAW,CAAC,UAACM,KAAD;AAAA,WAA2BA,KAAK,CAACC,cAAjC;AAAA,GAAD,CAA1C;AAAA,MAAOC,SAAP,gBAAOA,SAAP;AAAA,MAAkBC,SAAlB,gBAAkBA,SAAlB;;AAEA,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AAGAH,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAM;AACpBD,IAAAA,QAAQ,CAACb,kBAAkB,CAACe,SAAnB,EAAD,CAAR;AACD,GAFD,EAEG,EAFH;;AAIA,MAAIH,SAAJ,EAAe;AACb,WAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAGD,SACI,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,SAAS,IAAI,IAAb,GACC,oBAAC,KAAD,CAAO,MAAP;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAEL,YAFb;AAGE,IAAA,OAAO,EAAE;AACPU,MAAAA,KAAK,EAAE;AADA,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAQC,oBAAC,KAAD,CAAO,MAAP;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAEX,UAFb;AAGE,IAAA,OAAO,EAAE;AAAEY,MAAAA,MAAM,EAAE;AAAA,eAAM,IAAN;AAAA;AAAV,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATN,CADJ;AAkBH","sourcesContent":["import React from \"react\";\n\nimport {authenticationDuck} from \"../ducks/AuthenticationDuck\";\n\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { ApplicationState } from \"../store\";\n\nimport SplashScreen from './SplashScreen'\nimport MainScreen from \"./MainScreen\";\nimport SignInScreen from \"./SignInScreen\";\n\nconst Stack = createStackNavigator();\n\n\n\nexport default function AppRoot(){\n    const {authToken, isLoading} = useSelector((state:ApplicationState)=> state.authentication)\n\n    const dispatch = useDispatch()\n    \n\n    React.useEffect(() => {\n      dispatch(authenticationDuck.loadToken())\n    }, []);\n  \n    if (isLoading) {\n      return <SplashScreen />;\n    }\n \n\n    return(\n        <Stack.Navigator>\n            {authToken == null ? (\n              <Stack.Screen\n                name=\"SignIn\"\n                component={SignInScreen}\n                options={{\n                  title: \"Login\"}}\n              />\n            ) : (\n              <Stack.Screen\n                name=\"Main\"\n                component={MainScreen}\n                options={{ header: () => null }}\n              />\n            )}\n        </Stack.Navigator>\n    )\n}"]},"metadata":{},"sourceType":"module"}